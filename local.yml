- hosts: localhost
  vars:
    should_be_root: "{{ true if ansible_pkg_mgr != 'homebrew' else false }}"
  pre_tasks:
  - name: Update APT
    when: ansible_pkg_mgr != 'homebrew'
    become: true
    apt:
      force_apt_get: true
      update_cache: true
      state: present
  tasks:
  - name: Essential build tools (APT)
    become: true
    when: ansible_pkg_mgr != 'homebrew'
    ansible.builtin.package:
      name: ["ninja-build", "gettext", "libtool", "libtool-bin", "autoconf", "automake", "cmake", "g++", "pkg-config", "unzip", "doxygen"]
    tags:
    - base
    - neovim

  - name: Essential build tools (Mac)
    when: ansible_pkg_mgr == 'homebrew'
    ansible.builtin.package:
      name: ["ninja", "llvm"]
      state: present
    tags:
    - base
      
  - name: Install ZSH
    become: "{{ should_be_root }}"
    ansible.builtin.package:
      name: zsh
      state: present
    tags:
    - base
    - zsh

  - name: Install Curl
    become: "{{ should_be_root }}"
    ansible.builtin.package:
      name: curl
      state: present
    tags:
    - base

  - name: Install Git
    become: "{{ should_be_root }}"
    ansible.builtin.package:
      name: git
      state: present
    tags:
    - base

  - name: Install Stow
    become: "{{ should_be_root }}"
    ansible.builtin.package:
      name: stow
      state: present
    tags:
    - base
    - dotfiles

  - name: Install Tmux
    become: "{{ should_be_root }}"
    ansible.builtin.package:
      name: tmux
      state: present
    tags:
    - base

  - name: Install Ripgrep
    become: "{{ should_be_root }}"
    ansible.builtin.package:
      name: ripgrep
      state: present
    tags:
    - base

  - name: Prepare directory ~/.local/bin
    ansible.builtin.file:
      path: ~/.local/bin
      recurse: true
      state: directory
    tags:
    - base

  - name: Prepare directory ~/.local/src
    ansible.builtin.file:
      path: ~/.local/src
      recurse: true
      state: directory
    tags:
    - base
  - name: Prepare directory ~/Code/OSS
    ansible.builtin.file:
      path: ~/Code/OSS
      recurse: true
      state: directory
    tags:
    - dotfiles

  - name: Prepare directory ~/Code/Work
    ansible.builtin.file:
      path: ~/Code/Work
      recurse: true
      state: directory
    tags:
    - dotfiles

  - name: Clone Dotfiles
    shell: 'git clone git@github.com:primalivet/dotfiles ~/Code/OSS/dotfiles'
    tags:
    - test
    - dotfiles

  - name: Link Tmux config
    shell: cd ~/Code/OSS/dotfiles && stow tmux --no-folding -t ~
    tags:
    - dotfiles

  - name: Link Neovim config
    shell: cd ~/Code/OSS/dotfiles && stow nvim --no-folding -t ~
    tags:
     - dotfiles

  - name: Link ZSH config
    shell: cd ~/Code/OSS/dotfiles && stow zsh --no-folding -t ~
    tags:
    - dotfiles

  - name: Clone ZSH autosuggestions
    ansible.builtin.git:
      repo: "https://github.com/zsh-users/zsh-autosuggestions.git"
      dest: "{{ lookup('env', 'HOME') }}/.local/src/zsh-autosuggestions"
    tags:
    - zsh

  - name: Clone ZSH completions
    ansible.builtin.git:
      repo: "https://github.com/zsh-users/zsh-completions.git"
      dest: "{{ lookup('env', 'HOME') }}/.local/src/zsh-completions"
    tags:
    - zsh

  - name: Clone ZSH syntax highlighting
    ansible.builtin.git:
      repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
      dest: "{{ lookup('env', 'HOME') }}/.local/src/zsh-syntax-highlighting"
    tags:
    - zsh

  - name: Clone N (Node version manager)
    ansible.builtin.git:
      repo: https://github.com/tj/n.git
      dest: "{{ lookup('env', 'HOME') }}/.local/src/n"
    tags:
    - node

  - name: Install N (Node version manager)
    shell: "cd {{ lookup('env', 'HOME') }}/.local/src/n && PREFIX={{ lookup('env', 'HOME') }}/.local/ make install"
    tags:
    - node

  - name: Download Node LTS
    shell: "n 16.16.0 --quiet"
    tags:
    - node

  - name: Install Haskell (GHCup)
    become: true
    shell: "curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh"
    environment:
      BOOTSTRAP_HASKELL_NONINTERACTIVE: 1
      BOOTSTRAP_HASKELL_INSTALL_STACK: 1
      BOOTSTRAP_HASKELL_INSTALL_HLS: 1
    tags:
    - haskell

  - name: Install Rustup
    shell: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
    tags:
    - rust

  - name: Install Rust Analyzer
    block:
    - name: Fetch Rust Analyzer (APT)
      when: ansible_pkg_mgr != 'homebrew'
      shell: "curl -L https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > {{ lookup('env', 'HOME') }}/.local/bin/rust-analyzer"
      tags:
      - rust
      - lsp

    - name: Fetch Rust Analyzer (Mac)
      when: ansible_pkg_mgr == 'homebrew'
      shell: "curl -L https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-aarch64-apple-darwin.gz | gunzip -c - > {{ lookup('env', 'HOME') }}/.local/bin/rust-analyzer"
      tags:
      - rust
      - lsp

    - name: Make Rust Analyzer executable
      shell: "chmod +x {{ lookup('env', 'HOME') }}/.local/bin/rust-analyzer"
      tags:
      - rust
      - lsp

  - name: Install Typescript and Typescript Language Server (Node package)
    shell: 'npm install --global typescript typescript-language-server' # vscode-langservers-extracted is used for json, css and more
    tags:
    - node_packages
    - lsp

  - name: Install VSCode Extracted Language Servers
    shell: 'npm install --global vscode-langservers-extracted' # vscode-langservers-extracted is used for json, css and more
    tags:
    - node_packages
    - lsp

  - name: Install Eslint Deamon (Node package)
    shell: 'npm install --global eslint_d'
    tags:
    - node_packages
    - linter

  - name: Install Yarn (Node package)
    shell: 'npm install --global yarn'
    tags:
    - node_packages

  - name: Install StyLua (Node package)
    shell: 'npm install --global @johnnymorganz/stylua-bin'
    tags:
    - node_packages

  - name: Sumneko Lua Language Server
    block:
    - name: Clone Sumneko Lua Language Server
      ansible.builtin.git:
        repo: 'https://github.com/sumneko/lua-language-server.git'
        dest: "{{ lookup('env', 'HOME') }}/.local/src/lua-language-server"
        depth: 1
      tags:
      - lsp

    - name: Update Sumneko Lua Language Server Git submodules
      shell: "cd {{ lookup('env', 'HOME') }}/.local/src/lua-language-server && git submodule update --depth 1 --init --recursive"
      tags:
      - lsp

    - name: Compile Sumneko Lua Language Server
      shell: "cd {{ lookup('env', 'HOME') }}/.local/src/lua-language-server/3rd/luamake && ./compile/install.sh"
      tags:
      - lsp

    - name: Build Sumneko Lua Language Server
      shell: "cd {{ lookup('env', 'HOME') }}/.local/src/lua-language-server && ./3rd/luamake/luamake rebuild"
      tags:
      - lsp

  - name: Clone FZF
    ansible.builtin.git:
      repo: https://github.com/junegunn/fzf.git
      dest: "{{ lookup('env', 'HOME') }}/.local/src/fzf"
    tags:
    - fzf
    - base

  - name: Install FZF
    become: true
    shell: "{{ lookup('env', 'HOME') }}/.local/src/fzf/install --bin"
    tags:
    - fzf
    - base

  - name: Link FZF binary
    file:
      src: "{{ lookup('env', 'HOME') }}/.local/src/fzf/bin/fzf"
      dest: "{{ lookup('env', 'HOME') }}/.local/bin/fzf"
      state: link
    tags:
    - fzf
    - base

  - name: Clone Z
    ansible.builtin.git:
      repo: https://github.com/rupa/z.git
      dest: "{{ lookup('env', 'HOME') }}/.local/src/z"
    tags:
    - z
    - base

  - name: Install Neovim
    when: ansible_pkg_mgr == 'homebrew'
    ansible.builtin.package:
      name: neovim
      state: present
    tags:
    - neovim

  - name: Neovim (build from source)
    when: ansible_pkg_mgr != 'homebrew'
    block:
    - name: Clone Neovim
      ansible.builtin.git:
        repo: 'https://github.com/neovim/neovim.git'
        dest: "{{ lookup('env', 'HOME') }}/.local/src/neovim"
        version: stable
      tags:
      - neovim

    - name: Build Neovim
      shell: "cd {{ lookup('env', 'HOME') }}/.local/src/neovim && make clean && make distclean && make CMAKE_BUILD_TYPE=RelWithDebInfo"
      tags:
          - neovim

    - name: Install Neovim
      become: true
      shell: "cd {{ lookup('env', 'HOME') }}/.local/src/neovim && make install"
      tags:
          - neovim

  - name: Install Neovim package manager, Packer
    ansible.builtin.git:
        repo: 'https://github.com/wbthomason/packer.nvim'
        dest: "{{ lookup('env', 'HOME') }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
    tags:
        - neovim
